{-# LANGUAGE NoImplicitPrelude #-}
module Sample where

data List a = Cons a (List a)

infixr `Cons`

data Digit = Zero | One

Zero `xor` x = x
One `xor` One = Zero
One `xor` Zero = One

f (Cons a (Cons b xs)) = xor a b `Cons` f (Cons b xs)

t = One `Cons` Zero `Cons` Zero `Cons` f t

main _ = t

{-
compiles to:
01000101000110100001000001100001000110000001000110000001010000000101101110110010111111111111011111011001111111111001010000000101101110110110101010010110100010000101000110100001010101000000000001010101100111111110111100101000000010110111011000001011100101000000010110111011000001101100101000000010110111011000001101111100101101000000000111100101101000000000111001011010000000001100101101000000000100000000001001000111100000010001011011001000101100000100000110110110
-}
