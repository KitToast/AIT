This software allows one to run some experiments with
binary lambda calculus as a vehicle for Algorithmic Information Theory.

To run a lambda calculus machine:

  ./blc m program_file

where program_file holds the programa text, e.g.

  ./blc m id.lam

The machine takes its input from stdin, so this works just like cat with no argument.

You can do
  make prog.blc
or 
  make prog.Blc
to compile programs for universal machine uni.lam or the byte oriented uni8.lam

Run the bit-oriented universal machine with

  ./blc m uni.lam [conditional data]

and the byte-oriented universal machine

  ./blc m8 uni8.lam [conditional data]

Other actions besides m are:

  f to show the evaluated program with the bruijn indices
  p to show the un-evaluated progran in regular notation
  c show the program converted into Combinatory Logic
  x show the binary encoding of c
  e show the evaluated form of c
  d like p but with de Bruijn indices
  t like d but with LaTeX \lambda's
  b to show the bit encoded optimized term
  B like b but byte oriented
  s to show the length of the encoding in bits

>   "f" -> nl .                  show . nf . toDB $ prog
>   "e" -> nl .     show . strongCL . toCL . toDB $ prog
>   "c" -> nl .     show . toCL . optimize . toDB $ prog
>   "x" -> nl .   encode . toCL . optimize . toDB $ prog


See the lambda source files *.lam for more examples.

In the absence of a Haskell runtime environment, one can use
the perl blc interpreter blc.pl to run blc programs;
perl blc.pl is equivalent to ./blc m uni.lam, while perl blc.pl -8 is the byte
oriented verion, equivalent to ./blc m8 uni.lam.
This interpreter doesn't support conditional arguments though.

See http://en.wikipedia.org/wiki/Binary_lambda_calculus
for background information and the paper LC.pdf for technical details.

credits:
Module Lambda is derived from Lennart Augustsson's
http://www.augustsson.net/Darcs/Lambda/
Chris Hendrie and Bertram Felgenhauer contributed code and ideas
