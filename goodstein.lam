let
    -- ints
    succ = \n.\f\x. n f (f x);
    1 = \f. f;
    -- ordinal type: O = forall r. r -> (r -> r) -> ((N -> r) -> r) -> r
    Z = \z\s\l. z;
    -- S = \n.\z\s\l. s (n z s l);
    -- L = \f.\z\s\l. l (\n.f n z s l);
    add = \n\m. \z\s\l. m (n z s l) s l;
    expw = \n.\z\s\l. n s (\m\z. l (\n. n (\n\z. m (n z)) m z)) (\f\z. l (\n. f n z)) z;
    -- addexpw = \n\m.\z\s\l. m (n s (\m\z. l (\n. n (\n\z. m (n z)) m z)) (\f\z. l (\n. f n z)) z) s l;
    -- foldr lists
    nil = \c\n. n;
    cons = \x\xs.\c\n. c x (xs c n);
    hd = \xs. xs (\x\xs.x) (\x.x);
    tl = \xs\c\n. xs (\x\xs\f. f x (xs c)) (\_. n) (\x\y. y);
    map = \f\xs\c. xs (\x. c (f x));
    app = \xs\ys.\c\n. xs c (ys c n);
    go = \n.\lf\xs. n (\xs. lf (tl xs)) (app xs (map (add (expw (lf xs))) xs));
    -- go = \n.\lf\xs. n (\xs. lf (tl xs)) (app xs (map (addexpw (lf xs)) xs));
    base2 = \n. n go (\x.x) hd (cons Z nil);
    goodstein = \n. base2 n
       (\x.x)
       (\n\m. n (succ m))
       (\f\m. f (succ m) m)
       1
in
    goodstein
